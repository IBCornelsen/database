import * as z from "zod"
import { Ausstellgrund } from "@prisma/client"

export const VerbrauchsausweisWohnenSchema = z.object({
  id: z.number().int(),
  uid: z.string().describe("UID des Ausweises"),
  benutzer_id: z.number().int().describe("Die ID des Benutzers, welchem dieser Ausweis gehört").nullable(),
  ausstellgrund: z.nativeEnum(Ausstellgrund).describe("Ausstellgrund wie z.B. Vermietung oder Verkauf").nullable(),
  registriernummer: z.string().describe("Die Registriernummer des Ausweises").nullable(),
  zusaetzliche_heizquelle: z.boolean().describe("Falls eine sekundäre Heizquelle existiert, sollte dieser Wert auf true stehen").nullable(),
  einheit_1: z.string().describe("Einheit des Energieträgers der primären Heizquelle").nullable(),
  einheit_2: z.string().describe("Einheit des Energieträgers der sekundären Heizquelle").nullable(),
  startdatum: z.date().nullable(),
  verbrauch_1: z.number().int().describe("Energieverbrauch der primären Heizquelle im ersten der drei Verbrauchsjahre").nullable(),
  verbrauch_2: z.number().int().describe("Energieverbrauch der primären Heizquelle im zweiten der drei Verbrauchsjahre").nullable(),
  verbrauch_3: z.number().int().describe("Energieverbrauch der primären Heizquelle im letzten der drei Verbrauchsjahre").nullable(),
  verbrauch_4: z.number().int().describe("Energieverbrauch der sekund̈́ären Heizquelle im ersten der drei Verbrauchsjahre").nullable(),
  verbrauch_5: z.number().int().describe("Energieverbrauch der sekund̈́ären Heizquelle im zweiten der drei Verbrauchsjahre").nullable(),
  verbrauch_6: z.number().int().describe("Energieverbrauch der sekund̈́ären Heizquelle im letzten der drei Verbrauchsjahre").nullable(),
  warmwasser_enthalten: z.boolean().describe("Falls Warmwasser im Verbrauchswert enthalten ist, sollte dieser Wert auf true stehen").nullable(),
  warmwasser_anteil_bekannt: z.boolean().describe("Falls der Warmwasser Anteil am Verbrauch bekannt ist, sollte dieser Wert auf true stehen").nullable(),
  wird_gekuehlt: z.boolean().describe("Falls Kühlung im Verbrauch enthalten ist, sollte dieser Wert auf true stehen").nullable(),
  keller_beheizt: z.boolean().describe("Falls der Keller des Gebäudes beheizt wird, sollte dieser Wert auf true stehen").nullable(),
  faktorKeller: z.number().describe("Der Faktor mit dem die Wohnfläche erhöht wird wenn die beheizte Gesamtfläche (energetische Nutzfläche) unbekannt ist.").nullable(),
  alternative_heizung: z.boolean().describe("Falls der Heizungsverbrauch alternative Energieversorgungssysteme beinhaltet, sollte dieser Wert auf true stehen.").nullable(),
  alternative_warmwasser: z.boolean().describe("Falls der Warmwasserverbrauch alternative Energieversorgungssysteme (z.B. Solarsystem, Wärmepumpe, etc.) beinhaltet, sollte dieser Wert auf true stehen.").nullable(),
  alternative_lueftung: z.boolean().describe("Falls die Lüftung alternative Energieversorgungssysteme beinhaltet sollte dieser Wert auf true stehen.").nullable(),
  alternative_kuehlung: z.boolean().describe("Falls die Kühlung alternative Energieversorgungssysteme beinhaltet sollte dieser Wert auf true stehen.").nullable(),
  anteil_warmwasser_1: z.number().describe("Anteil des Warmwassers am Gesamtverbrauch der primären Energiequelle in Prozent").nullable(),
  anteil_warmwasser_2: z.number().describe("Anteil des Warmwassers am Gesamtverbrauch der sekundären Energiequelle in Prozent").nullable(),
  aufnahme_id: z.number().int().describe("ID der korrespondierenden Gebäudeaufnahme"),
})
