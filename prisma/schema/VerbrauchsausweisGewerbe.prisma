
model VerbrauchsausweisGewerbe {
  id                      Int            @id @default(autoincrement())
  uid                     String         @unique @default(dbgenerated("'vag-' || gen_random_uuid()"))
  benutzer_id             Int?
  ausstellgrund           Ausstellgrund?
  registriernummer        String?        @db.VarChar
  zusaetzliche_heizquelle Boolean?
  brennstoff_1            String?        @db.VarChar(50)
  einheit_1               String?        @db.VarChar(50)
  brennstoff_2            String?        @db.VarChar(50)
  einheit_2               String?        @db.VarChar(50)
  startdatum              DateTime?      @db.Timestamp(6)
  verbrauch_1             Int?
  verbrauch_2             Int?
  verbrauch_3             Int?
  verbrauch_4             Int?
  verbrauch_5             Int?
  verbrauch_6             Int?

  strom_1 Int?
  strom_2 Int?
  strom_3 Int?

  stromverbrauch_enthaelt_heizung     Boolean?
  stromverbrauch_enthaelt_warmwasser  Boolean?
  stromverbrauch_enthaelt_lueftung    Boolean?
  stromverbrauch_enthaelt_beleuchtung Boolean?
  stromverbrauch_enthaelt_kuehlung    Boolean?
  stromverbrauch_enthaelt_sonstige    String?  @db.VarChar(50)

  kuehlung_enthalten Boolean?
  anteil_kuehlung_1  Float?
  anteil_kuehlung_2  Float?


  keller_beheizt Boolean?

  alternative_heizung    Boolean?
  alternative_warmwasser Boolean?
  alternative_lueftung   Boolean?
  alternative_kuehlung   Boolean?

  warmwasser_enthalten Boolean?
  anteil_warmwasser_1  Float?
  anteil_warmwasser_2  Float?

	ausgestellt Boolean? @default(false)
	/// @zod.describe("Falls der Ausweis storniert wurde, sollte dieser Wert auf true stehen")
	storniert Boolean? @default(false)
	/// @zod.describe("Falls der Ausweis bestellt wurde, sollte dieser Wert auf true stehen")
	bestellt					Boolean?  @default(false)
	/// @zod.describe("Falls der Ausweis vom Aussteller zur체ckgestellt wurde, sollte dieser Wert auf true stehen")
	zurueckgestellt Boolean?  @default(false)
	/// @zod.describe("Durch den Kunden hinzugef체gte Anmerkung zur Vorabpr체fung")
	prueftext String? @db.VarChar(1000)

	beschreibung String? @db.Text

	/// @zod.describe("Ob bei der Anfrage der Registriernummer eine Kontrolldatei angefragt wurde")
	kontrolldatei_angefragt Boolean? @default(false)


  benutzer            Benutzer?           @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

		rechnung_id Int? @unique
	rechnung Rechnung? @relation(fields: [rechnung_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

	/// @zod.describe("ID der korrespondierenden Geb채udeaufnahme")
	aufnahme_id        Int @unique
  aufnahme           Aufnahme @relation(fields: [aufnahme_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
