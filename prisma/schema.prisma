//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// main.prisma
//

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator faker {
  provider = "prisma-generator-fake-data"
  output   = "../src/types/fake-data.ts"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../src/generated/zod"
  relationModel         = false
  modelCase             = "PascalCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  imports               = null
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

//
// Anteilshaber.prisma
//

model Anteilshaber {
  id                  Int                @id @default(autoincrement())
  benutzer_id         Int
  gebaeude_id         Int
  rolle               String?            @db.VarChar
  privilegien         BigInt?
  uid                 String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  benutzer            Benutzer           @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gebaeude_stammdaten GebaeudeStammdaten @relation(fields: [gebaeude_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//
// ApiRequests.prisma
//

model ApiRequests {
  id           Int       @id @default(autoincrement())
  date         DateTime  @default(now()) @db.Timestamp(6)
  ip           String    @db.VarChar(50)
  method       String    @db.VarChar(10)
  path         String    @db.VarChar(100)
  status       Int
  responseTime Float
  responseSize Int
  userAgent    String    @db.VarChar(500)
  user_id      Int?
  user         Benutzer? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//
// BedarfsausweisWohnen.prisma
//

model BedarfsausweisWohnen {
  id                            Int                @id @default(autoincrement())
  uid                           String             @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gebaeude_stammdaten_id        Int
  benutzer_id                   Int
  rechnungen_id                 Int?
  ausweisart                    String             @db.VarChar
  erstellungsdatum              DateTime?          @db.Timestamp(6)
  ausstellgrund                 String             @db.VarChar
  registriernummer              String?            @db.VarChar
  erledigt                      Boolean?
  saniert                       Boolean?
  baujahr                       Int[]
  einheiten                     Int?
  wohnflaeche                   Int?
  keller_beheizt                Boolean?
  dachgeschoss_beheizt          Int?
  lueftungskonzept              String?            @db.VarChar
  leerstand                     Float?             @db.Real
  versorgungssysteme            Int?
  fenster_dach                  Int?
  energiequelle_2_nutzung       Int?
  daemmung                      Int?
  anzahl_vollgeschosse          Int?
  geschosshoehe                 Float?
  anzahl_gauben                 Int?
  breite_gauben                 Float?
  masse_a                       Float?
  masse_b                       Float?
  masse_c                       Float?
  masse_d                       Float?
  masse_e                       Float?
  masse_f                       Float?
  fensterflaeche_so_sw          Float?
  fensterflaeche_nw_no          Float?
  aussenwandflaeche_unbeheizt   Float?
  dachflaeche                   Float?
  deckenflaeche                 Float?
  dach_u_wert                   Float?
  decke_u_wert                  Float?
  aussenwand_flaeche            Float?
  aussenwand_u_wert             Float?
  fussboden_flaeche             Float?
  fussboden_u_wert              Float?
  volumen                       Float?
  dicht                         Boolean?
  fenster_flaeche_1             Float?
  fenster_art_1                 Float?
  fenster_flaeche_2             Float?
  fenster_art_2                 Float?
  dachfenster_flaeche           Float?
  dachfenster_art               Float?
  haustuer_flaeche              Float?
  haustuer_art                  Float?
  dach_bauart                   String?            @db.VarChar
  decke_bauart                  String?            @db.VarChar
  dach_daemmung                 Float?
  decke_daemmung                Float?
  aussenwand_daemmung           Float?
  boden_daemmung                Float?
  aussenwand_bauart             String?            @db.VarChar
  boden_bauart                  String?            @db.VarChar
  warmwasser_verteilung         String?            @db.VarChar
  warmwasser_speicherung        String?            @db.VarChar
  warmwasser_erzeugung          String?            @db.VarChar
  heizung_zentral               Boolean?
  heizung_verteilung            String?            @db.VarChar
  heizung_speicherung           String?            @db.VarChar
  waerme_erzeugung_heizung      String?            @db.VarChar
  anteil_zusatzheizung          Float?
  kollektor_flaeche             Float?
  vanw_stromverbrauch_enthalten Float?
  wird_gekuehlt                 Boolean?
  benutzer                      Benutzer           @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gebaeude_stammdaten           GebaeudeStammdaten @relation(fields: [gebaeude_stammdaten_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rechnungen                    Rechnungen?        @relation(fields: [rechnungen_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("bedarfsausweis_wohnen")
}

//
// Benutzer.prisma
//

model Benutzer {
  id         Int     @id @default(autoincrement())
  uid        String  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String? @db.VarChar(50)
  vorname    String? @db.VarChar(50)
  email      String  @unique(map: "benutzer_email_idx") @db.VarChar(255)
  passwort   String  @db.VarChar(255)
  profilbild String? @db.VarChar
  plz        String? @db.VarChar(5)
  ort        String? @db.VarChar(50)
  adresse    String? @db.VarChar(100)

  anteilshaber             Anteilshaber[]             @ignore
  bedarfsausweis_wohnen    BedarfsausweisWohnen[]
  documenttemplates        documenttemplates[]
  gebaeude_stammdaten      GebaeudeStammdaten[]
  rechnungen               Rechnungen[]
  tokens                   tokens[]
  VerbrauchsausweisGewerbe VerbrauchsausweisGewerbe[]
  VerbrauchsausweisWohnen  VerbrauchsausweisWohnen[]
  ApiRequests              ApiRequests[]

  @@map("benutzer")
}

//
// documenttemplates.prisma
//

model documenttemplates {
  id               Int           @id(map: "PK_DOCUMENTTEMPLATES") @default(autoincrement())
  name             String        @db.VarChar(100)
  shortdescription String        @db.VarChar(100)
  longdescription  String        @db.VarChar(5000)
  user_id          Int
  is_private       Boolean       @default(true)
  documenttype     Int
  filename         String        @db.VarChar(100)
  created_at       DateTime      @default(now()) @db.Timestamp(0)
  updated_at       DateTime      @default(now()) @db.Timestamp(0)
  benutzer         Benutzer      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "benutzer_fk")
  documenttypes    documenttypes @relation(fields: [documenttype], references: [id], onDelete: Cascade, map: "documenttypes_fk")
}

//
// documenttypes.prisma
//

model documenttypes {
  id                Int                 @id(map: "PK_DOCUMENTTYPES") @default(autoincrement())
  name              String              @db.VarChar(100)
  shortdescription  String              @db.VarChar(100)
  longdescription   String              @db.VarChar(5000)
  documenttemplates documenttemplates[]
}

//
// GebaeudeBilder.prisma
//

model GebaeudeBilder {
  id                     Int                @id @default(autoincrement())
  gebaeude_stammdaten_id Int
  kategorie              String             @db.VarChar
  uid                    String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gebaeude_stammdaten    GebaeudeStammdaten @relation(fields: [gebaeude_stammdaten_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("gebaeude_bilder")
}

//
// GebaeudePlaene.prisma
//

model GebaeudePlaene {
  id                     Int                @id @default(autoincrement())
  gebaeude_stammdaten_id Int
  uid                    String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gebaeude_stammdaten    GebaeudeStammdaten @relation(fields: [gebaeude_stammdaten_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("gebaeude_plaene")
}

//
// GebaeudeStammdaten.prisma
//

model GebaeudeStammdaten {
  id               Int      @id @default(autoincrement())
  uid              String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  benutzer_id      Int?
  gebaeudetyp      String?  @db.VarChar
  gebaeudeteil     String?  @db.VarChar
  baujahr_gebaeude Int[]
  baujahr_heizung  Int[]
  baujahr_klima    Int[]
  einheiten        Int?
  flaeche          Int?
  saniert          Boolean?
  keller           Int?
  dachgeschoss     Int?
  lueftung         String?  @db.VarChar(50)
  kuehlung         String?  @db.VarChar(50)
  leerstand        Int?
  plz              String?  @db.VarChar(5)
  ort              String?  @db.VarChar(50)
  adresse          String?  @db.VarChar(100)

  zentralheizung                          Boolean?
  solarsystem_warmwasser                  Boolean?
  warmwasser_rohre_gedaemmt               Boolean?
  niedertemperatur_kessel                 Boolean?
  brennwert_kessel                        Boolean?
  heizungsrohre_gedaemmt                  Boolean?
  standard_kessel                         Boolean?
  waermepumpe                             Boolean?
  raum_temperatur_regler                  Boolean?
  photovoltaik                            Boolean?
  durchlauf_erhitzer                      Boolean?
  einzelofen                              Boolean?
  zirkulation                             Boolean?
  einfach_verglasung                      Boolean?
  dreifach_verglasung                     Boolean?
  fenster_teilweise_undicht               Boolean?
  doppel_verglasung                       Boolean?
  fenster_dicht                           Boolean?
  rolllaeden_kaesten_gedaemmt             Boolean?
  isolier_verglasung                      Boolean?
  tueren_undicht                          Boolean?
  tueren_dicht                            Boolean?
  dachgeschoss_gedaemmt                   Boolean?
  keller_decke_gedaemmt                   Boolean?
  keller_wand_gedaemmt                    Boolean?
  aussenwand_gedaemmt                     Boolean?
  oberste_geschossdecke_gedaemmt          Boolean?
  aussenwand_min_12cm_gedaemmt            Boolean?
  dachgeschoss_min_12cm_gedaemmt          Boolean?
  oberste_geschossdecke_min_12cm_gedaemmt Boolean?

  anteilshaber             Anteilshaber[]             @ignore
  bedarfsausweis_wohnen    BedarfsausweisWohnen[]
  gebaeude_bilder          GebaeudeBilder[]
  gebaeude_plaene          GebaeudePlaene[]
  benutzer                 Benutzer?                  @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  VerbrauchsausweisGewerbe VerbrauchsausweisGewerbe[]
  VerbrauchsausweisWohnen  VerbrauchsausweisWohnen[]

  @@map("gebaeude_stammdaten")
}

//
// Klimafaktoren.prisma
//

model Klimafaktoren {
  id          Int    @id @default(autoincrement())
  plz         String @db.VarChar(5)
  month       Int
  year        Int
  klimafaktor Float  @default(1)

  // Mithilfe eines composite keys können wir einfach den Monat und das Jahr mit der Postleitzahl verknüpfen
  // somit müssen wir nicht mehr eine Zeile für jeden Monat anlegen.
  @@unique([plz, month, year])
}

//
// Postleitzahlen.prisma
//

model Postleitzahlen {
  id         Int    @id @default(autoincrement())
  plz        String @unique @db.VarChar(5)
  stadt      String @db.VarChar(100)
  bundesland String @db.VarChar(100)
}

//
// Rechnungen.prisma
//

model Rechnungen {
  id                       Int                        @id @default(autoincrement())
  benutzer_id              Int
  empfaenger_zeile_1       String?                    @db.VarChar
  empfaenger_zeile_2       String?                    @db.VarChar
  strasse                  String                     @db.VarChar(100)
  plz                      String?                    @db.VarChar
  ort                      String?                    @db.VarChar
  uid                      String                     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bedarfsausweis_wohnen    BedarfsausweisWohnen[]
  benutzer                 Benutzer                   @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  VerbrauchsausweisGewerbe VerbrauchsausweisGewerbe[]
  VerbrauchsausweisWohnen  VerbrauchsausweisWohnen[]

  @@map("rechnungen")
}

//
// tokens.prisma
//

model tokens {
  id           Int      @id(map: "PK_TOKENS") @default(autoincrement())
  token        String   @db.VarChar(36)
  user_id      Int
  date_created DateTime @default(now()) @db.Timestamp(6)
  last_used    DateTime @default(now()) @db.Timestamp(6)
  times_used   Int      @default(0)
  permissions  Int      @default(0)
  benutzer     Benutzer @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_benutzer_tokens_user_id")
}

//
// VerbrauchsausweisGewerbe.prisma
//

model VerbrauchsausweisGewerbe {
  id                     Int                @id
  uid                    String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gebaeude_stammdaten_id Int
  rechnungen_id          Int?
  benutzer_id            Int
  benutzer               Benutzer           @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gebaeude_stammdaten    GebaeudeStammdaten @relation(fields: [gebaeude_stammdaten_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rechnungen             Rechnungen?        @relation(fields: [rechnungen_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//
// VerbrauchsausweisWohnen.prisma
//

model VerbrauchsausweisWohnen {
  id                        Int       @id @default(autoincrement())
  uid                       String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gebaeude_stammdaten_id    Int
  benutzer_id               Int?
  rechnungen_id             Int?
  erstellungsdatum          DateTime? @db.Timestamp(6)
  ausstellgrund             String?   @db.VarChar
  registriernummer          String?   @db.VarChar
  erledigt                  Boolean?
  baujahr_heizung           Int[]
  zusaetzliche_heizquelle   Boolean?
  brennstoff_1              String?   @db.VarChar(50)
  einheit_1                 String?   @db.VarChar(50)
  brennstoff_2              String?   @db.VarChar(50)
  einheit_2                 String?   @db.VarChar(50)
  startdatum                DateTime? @db.Timestamp(6)
  verbrauch_1               Int?
  verbrauch_2               Int?
  verbrauch_3               Int?
  verbrauch_4               Int?
  verbrauch_5               Int?
  verbrauch_6               Int?
  warmwasser_enthalten      Boolean?
  warmwasser_anteil_bekannt Boolean?

  wird_gekuehlt Boolean?

  keller_beheizt Boolean?

  alternative_heizung    Boolean?
  alternative_warmwasser Boolean?
  alternative_lueftung   Boolean?
  alternative_kuehlung   Boolean?

  ausweisart String @default("VA") @db.VarChar

  anteil_warmwasser_1 Float?
  anteil_warmwasser_2 Float?
  benutzer            Benutzer?          @relation(fields: [benutzer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gebaeude_stammdaten GebaeudeStammdaten @relation(fields: [gebaeude_stammdaten_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rechnungen          Rechnungen?        @relation(fields: [rechnungen_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
